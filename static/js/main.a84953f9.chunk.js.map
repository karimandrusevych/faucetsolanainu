{"version":3,"sources":["Pages/Faucet.js","solanainu-logo-sm.png","App.js","reportWebVitals.js","index.js"],"names":["web3","require","splToken","DEMO_WALLET_SECRET_KEY","Uint8Array","SOLANA_INU_ADDRESS","FAUCET_FEE","LAMPORTS_PER_SOL","Faucet","captchaRef","useRef","useState","loading","setLoading","useWallet","publicKey","sendTransaction","fromTokenAccount","setFromTokenAccount","myToken","setMyToken","fromWallet","setFromWallet","connection","setConnection","_numToken","_setNumToken","captchaCorrect","setCaptchCorrect","useEffect","a","axios","get","res","console","log","data","body","success","length","tokenCount","_connection","Connection","clusterApiUrl","_fromWallet","Keypair","fromSecretKey","myMint","PublicKey","_myToken","Token","TOKEN_PROGRAM_ID","getOrCreateAssociatedAccountInfo","_fromTokenAccount","getSettingData","createConnection","chargeCheck","walletAddress","toString","post","result","getIPAdress","_ip","IPv4","replaceAll","isExistRule","ip","ipAddress","saveTransferTransaction","toast","checkWalletBalance","getBalance","balance","transferToken","WalletNotConnectedError","current","reset","fee_tranfer_transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","fee_transfer_signature","confirmTransaction","value","err","toTokenAccount","transaction","createTransferInstruction","address","sendAndConfirmTransaction","signature","Container","style","position","Form","marginTop","Row","margin","Col","marginLeft","display","justifyContent","alignItems","ref","sitekey","onChange","Button","onClick","disabled","variant","Spinner","animation","color","top","left","transform","App","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","wallets","getPhantomWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","Navbar","collapseOnSelect","expand","Brand","href","src","inu_logo","width","height","className","alt","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a84953f9.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport {\n  Container, \n  Button,\n  Form,\n  Row,\n  Spinner,\n  Col\n} from 'react-bootstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport axios from 'axios';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { SystemProgram, Transaction } from '@solana/web3.js';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nconst web3 = require('@solana/web3.js');\nconst splToken = require('@solana/spl-token');\n\n\n\nconst DEMO_WALLET_SECRET_KEY = new Uint8Array([119,33,99,163,230,116,82,108,180,22,234,75,187,102,118,87,193,192,155,246,246,8,107,149,140,222,211,237,215,130,101,7,71,162,57,238,191,248,130,62,45,151,48,126,13,182,181,182,255,61,65,52,237,48,103,163,1,183,187,221,158,44,89,14]);\nconst FAUCET_ADDRESS = \"5pdRNu4p6Lpc5UqKVnY1rgyFi5GReCKLJMTV4cYoAsEm\";\nconst SOLANA_INU_ADDRESS = \"5jFnsfx36DyGk8uVGrbXnVUMTsBkPXGpx6e69BiGFzko\";\n\nconst FAUCET_FEE = 2 * web3.LAMPORTS_PER_SOL / 1000;\n\nconst Faucet = () => {\n  //Loading\n  const captchaRef = useRef();\n  const [loading, setLoading] = useState(false);\n  \n  const { publicKey, sendTransaction } = useWallet();\n  const [fromTokenAccount, setFromTokenAccount] = useState(null);\n  const [myToken, setMyToken] = useState(null);\n  const [fromWallet, setFromWallet] = useState(null);\n  const [connection, setConnection] = useState(null);\n  const [_numToken, _setNumToken] = useState(0);\n  const [captchaCorrect, setCaptchCorrect] = useState(false);\n\n  useEffect(() => {\n    async function getSettingData() {\n      let res = await axios.get(\"https://us-central1-devtest-d441d.cloudfunctions.net/solanainu/api/v1/setting/read\");\n      console.log(res.data.body);\n      if (res.data.success === true && res.data.body.length > 0) {\n        _setNumToken(res.data.body[0].tokenCount);\n      }\n    }\n\n    async function createConnection() {\n      // Connect to cluster\n      var _connection = new web3.Connection(web3.clusterApiUrl(\"mainnet-beta\"));\n      setConnection(_connection);\n\n      // Construct wallet keypairs\n      var _fromWallet = web3.Keypair.fromSecretKey(DEMO_WALLET_SECRET_KEY);\n      setFromWallet(_fromWallet);\n\n      // Construct my token class\n      var myMint = new web3.PublicKey(SOLANA_INU_ADDRESS);\n      var _myToken = new splToken.Token(\n        _connection,\n        myMint,\n        splToken.TOKEN_PROGRAM_ID,\n        _fromWallet\n      );\n\n      setMyToken(_myToken);\n      // Create associated token accounts for my token if they don't exist yet\n      var _fromTokenAccount = await _myToken.getOrCreateAssociatedAccountInfo(\n        _fromWallet.publicKey\n      );\n\n      setFromTokenAccount(_fromTokenAccount);\n    }\n\n    getSettingData();\n    createConnection();\n  }, []);\n\n  const chargeCheck = async () => {\n    if (!publicKey) return;\n\n    const data = { \n      walletAddress: publicKey.toString()\n    };\n\n    console.log(data);\n\n    try {\n      let result = await axios.post('https://us-central1-devtest-d441d.cloudfunctions.net/solanainu/api/v1/rule/chargeCheck', data)\n\n      console.log(\"TRIET \" + result.data.success); \n      return result.data.success;\n      } catch (err) {\n        return true;\n      }\n  }\n  \n  const getIPAdress = async () => {\n      const res = await axios.get('https://geolocation-db.com/json/')\n      let _ip = res.data.IPv4.replaceAll('.', '_');\n      return _ip\n  }\n\n  const isExistRule = async () => {\n    if (!publicKey) return;\n\n    let ip = await getIPAdress();\n    const data = { \n      ipAddress: ip,\n      walletAddress: publicKey.toString()\n    };\n\n    console.log(data);\n\n    try {\n      let result = await axios.post('https://us-central1-devtest-d441d.cloudfunctions.net/solanainu/api/v1/rule/check', data)\n\n      console.log(\"TRIET \" + result.data.success); \n      return !result.data.success;\n      } catch (err) {\n        return true;\n      }\n  }\n\n  const saveTransferTransaction = async () => {\n    if (!publicKey) return;\n\n    let ip = await getIPAdress();\n    const data = { \n      ipAddress: ip,\n      walletAddress: publicKey.toString()\n    };\n\n    console.log(data);\n\n    try {\n      await axios.post('https://us-central1-devtest-d441d.cloudfunctions.net/solanainu/api/v1/rule/create', data)\n      return true;\n      } catch (err) {\n        toast(\"Plese try again later\");\n        return false;\n      }\n  }\n\n  const checkWalletBalance = async () => {\n    console.log(\"Get SOL balance\")\n    let balance = await connection.getBalance(publicKey)\n    console.log(balance, FAUCET_FEE)\n    return (balance > FAUCET_FEE)\n  }\n\n  const transferToken = async () => {\n    if (loading) { return }\n    console.log(\"clicked\")\n    if (!publicKey) throw new WalletNotConnectedError();\n\n    setLoading(true);\n    let isExist = await isExistRule();\n    if (isExist) { \n      toast(\"You already got the faucet today!\");\n      captchaRef.current.reset();\n      setCaptchCorrect(false);\n      setLoading(false);\n      return \n    }\n\n    let _chargeCheck = await chargeCheck();\n    if (_chargeCheck) {\n      let checkBalance = await checkWalletBalance();\n      if (!checkBalance) {\n        toast(\"Not enough balance to get faucet!\");\n        captchaRef.current.reset();\n        setCaptchCorrect(false);\n        setLoading(false);\n\n        return\n      }\n\n      const fee_tranfer_transaction = new Transaction().add(\n          SystemProgram.transfer({\n              fromPubkey: publicKey,\n              toPubkey: FAUCET_ADDRESS,\n              lamports: FAUCET_FEE,\n          })\n      );\n\n      const fee_transfer_signature = await sendTransaction(fee_tranfer_transaction, connection);\n\n      let result = await connection.confirmTransaction(fee_transfer_signature, 'processed');\n\n      if (result.value.err != null)  {\n        toast(\"We get some error, please try again later!!\");\n        captchaRef.current.reset();\n        setCaptchCorrect(false);\n        setLoading(false);\n        return;\n      }\n  }\n\n  var toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\n  publicKey \n  )\n\n  // Add token transfer instructions to transaction\n  var transaction = new web3.Transaction()\n    .add(\n      splToken.Token.createTransferInstruction(\n        splToken.TOKEN_PROGRAM_ID,\n        fromTokenAccount.address,\n        toTokenAccount.address,\n        fromWallet.publicKey,\n        [],\n        _numToken * 10**9 \n      )\n    );\n  // Sign transaction, broadcast, and confirm\n  var signature = await web3.sendAndConfirmTransaction(\n    connection,\n    transaction,\n    [fromWallet]\n  );\n\n  await saveTransferTransaction();\n  setLoading(false);\n  toast(`Transferd ${_numToken} Solana INU to your wallet`);\n  captchaRef.current.reset();\n  setCaptchCorrect(false);\n  console.log(\"SIGNATURE\", signature);\n  console.log(\"SUCCESS\");\n  }\n\n  function onChange(value) {\n    setCaptchCorrect(value !== null ? true : false); \n    console.log(\"captcha change \" + value)\n  }\n\n\n  return (\n      <Container style={{position: 'relative'}}>\n        <ToastContainer/>\n          {!publicKey ? \n            <h2 style={{\n              color: 'white',  \n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)'}}>\n              Please connect your wallet first\n              </h2>\n            :\n            <>\n              <Form style={{ marginTop: '100px'}}>\n                <Row style={{ margin: '5vh' }}>\n                  <Col>\n                    <h1>Solana INU Faucet</h1>\n                    <p>Current tokens will be receive: {_numToken} INU</p>\n                  </Col>\n                </Row>\n                <Row style={{\n                  marginLeft: '5vh',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                  }}>\n                  <ReCAPTCHA \n                      ref={captchaRef}\n                      sitekey=\"6LdHCVgdAAAAAOaYxiE2EDWwusRR6IKLdyOGenz_\"\n                      onChange={onChange}\n                    />\n                </Row>\n                <Row style={{ margin: '5vh' }}>\n                  <Col>\n                  <Button onClick={transferToken} disabled={!captchaCorrect} variant='primary'>\n                    {loading ? \n                      <Spinner animation=\"border\" />\n                      :\n                      \"Request tokens\"\n                    }\n                  </Button>\n                  </Col>\n                </Row>\n              </Form>\n            </>\n          }\n\n        </Container>\n  );\n}\n\nexport default Faucet;\n\n","export default __webpack_public_path__ + \"static/media/solanainu-logo-sm.134399a2.png\";","import './App.css';\nimport React, { useMemo } from 'react';\nimport Faucet from './Pages/Faucet';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport {\n    Container, \n    Navbar\n} from 'react-bootstrap';\n\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n    getPhantomWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n    WalletMultiButton,\n    WalletModalProvider,\n} from '@solana/wallet-adapter-react-ui';\n\nimport { clusterApiUrl } from '@solana/web3.js';\n\nimport inu_logo from './solanainu-logo-sm.png'\n\n// Default styles that can be overridden by your app\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nfunction App() {\n\n const network = WalletAdapterNetwork.Devnet;\n const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  \n const wallets = useMemo(() => [\n        getPhantomWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network }),\n    ], [network]);\n\n\n\n  return (\n      <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n              <WalletModalProvider>\n                <Router>\n                    <Navbar collapseOnSelect expand=\"lg\" variant=\"dark\">\n                      <Container>\n                        <Navbar.Brand href='/'>\n                          <img src={inu_logo} width=\"70\" height=\"70\" className=\"d-inline-block \" alt=\"\" />\n                        </Navbar.Brand>\n                        <WalletMultiButton/> \n\n                      </Container>\n                    </Navbar>\n\n                    <Switch>\n                        <Route exact path='/'>\n                            <Faucet/> \n                        </Route>   \n                    </Switch>\n                </Router>\n              </WalletModalProvider>\n          </WalletProvider>\n      </ConnectionProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}